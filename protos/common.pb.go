// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	common.proto
	consensusMsg.proto

It has these top-level messages:
	Envelope
	StreamMsg
	PreprepareMessage
	PrepareMessage
	CommitMessage
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Envelope struct {
	// marshalled Message
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// signed Message
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// sender's public key
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Envelope) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type StreamMsg struct {
	Channel []byte `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*StreamMsg_PreprepareMessage
	//	*StreamMsg_PrepareMessage
	//	*StreamMsg_CommitMessage
	Content isStreamMsg_Content `protobuf_oneof:"content"`
}

func (m *StreamMsg) Reset()                    { *m = StreamMsg{} }
func (m *StreamMsg) String() string            { return proto.CompactTextString(m) }
func (*StreamMsg) ProtoMessage()               {}
func (*StreamMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isStreamMsg_Content interface {
	isStreamMsg_Content()
}

type StreamMsg_PreprepareMessage struct {
	PreprepareMessage *PreprepareMessage `protobuf:"bytes,2,opt,name=preprepareMessage,oneof"`
}
type StreamMsg_PrepareMessage struct {
	PrepareMessage *PrepareMessage `protobuf:"bytes,3,opt,name=prepareMessage,oneof"`
}
type StreamMsg_CommitMessage struct {
	CommitMessage *CommitMessage `protobuf:"bytes,4,opt,name=commitMessage,oneof"`
}

func (*StreamMsg_PreprepareMessage) isStreamMsg_Content() {}
func (*StreamMsg_PrepareMessage) isStreamMsg_Content()    {}
func (*StreamMsg_CommitMessage) isStreamMsg_Content()     {}

func (m *StreamMsg) GetContent() isStreamMsg_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *StreamMsg) GetChannel() []byte {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *StreamMsg) GetPreprepareMessage() *PreprepareMessage {
	if x, ok := m.GetContent().(*StreamMsg_PreprepareMessage); ok {
		return x.PreprepareMessage
	}
	return nil
}

func (m *StreamMsg) GetPrepareMessage() *PrepareMessage {
	if x, ok := m.GetContent().(*StreamMsg_PrepareMessage); ok {
		return x.PrepareMessage
	}
	return nil
}

func (m *StreamMsg) GetCommitMessage() *CommitMessage {
	if x, ok := m.GetContent().(*StreamMsg_CommitMessage); ok {
		return x.CommitMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamMsg_OneofMarshaler, _StreamMsg_OneofUnmarshaler, _StreamMsg_OneofSizer, []interface{}{
		(*StreamMsg_PreprepareMessage)(nil),
		(*StreamMsg_PrepareMessage)(nil),
		(*StreamMsg_CommitMessage)(nil),
	}
}

func _StreamMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamMsg)
	// content
	switch x := m.Content.(type) {
	case *StreamMsg_PreprepareMessage:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PreprepareMessage); err != nil {
			return err
		}
	case *StreamMsg_PrepareMessage:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrepareMessage); err != nil {
			return err
		}
	case *StreamMsg_CommitMessage:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommitMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamMsg.Content has unexpected type %T", x)
	}
	return nil
}

func _StreamMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamMsg)
	switch tag {
	case 2: // content.preprepareMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PreprepareMessage)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMsg_PreprepareMessage{msg}
		return true, err
	case 3: // content.prepareMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PrepareMessage)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMsg_PrepareMessage{msg}
		return true, err
	case 4: // content.commitMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommitMessage)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMsg_CommitMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamMsg)
	// content
	switch x := m.Content.(type) {
	case *StreamMsg_PreprepareMessage:
		s := proto.Size(x.PreprepareMessage)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMsg_PrepareMessage:
		s := proto.Size(x.PrepareMessage)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMsg_CommitMessage:
		s := proto.Size(x.CommitMessage)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Envelope)(nil), "protos.Envelope")
	proto.RegisterType((*StreamMsg)(nil), "protos.StreamMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/protos.StreamService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamClient{stream}
	return x, nil
}

type StreamService_StreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type streamServiceStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	Stream(StreamService_StreamServer) error
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).Stream(&streamServiceStreamServer{stream})
}

type StreamService_StreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type streamServiceStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StreamService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "common.proto",
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x57, 0x27, 0x9d, 0x7d, 0x6e, 0xa2, 0x0f, 0x1c, 0x75, 0x78, 0x90, 0x9e, 0x76, 0x1a,
	0x52, 0xcf, 0x82, 0x38, 0x84, 0x79, 0x28, 0x48, 0x77, 0xf3, 0x96, 0xd5, 0x47, 0x2d, 0xb6, 0x49,
	0xc9, 0x4b, 0x07, 0xfb, 0xdf, 0x3d, 0x48, 0x9b, 0x05, 0xb7, 0x0e, 0x0a, 0xe5, 0xfb, 0x23, 0x9f,
	0x24, 0x2f, 0x30, 0xce, 0x54, 0x55, 0x29, 0xb9, 0xa8, 0xb5, 0x32, 0x0a, 0xfd, 0xee, 0xc7, 0x33,
	0xcc, 0x94, 0x64, 0x92, 0xdc, 0x70, 0xc2, 0xb9, 0xcd, 0xa2, 0x4f, 0xb8, 0x78, 0x93, 0x5b, 0x2a,
	0x55, 0x4d, 0x18, 0xc2, 0xa8, 0x16, 0xbb, 0x52, 0x89, 0xaf, 0xd0, 0x7b, 0xf0, 0xe6, 0xe3, 0xd4,
	0x49, 0xbc, 0x87, 0x80, 0x8b, 0x5c, 0x0a, 0xd3, 0x68, 0x0a, 0xcf, 0xba, 0xec, 0xdf, 0xc0, 0x29,
	0xf8, 0x75, 0xb3, 0xf9, 0xa1, 0x5d, 0x38, 0xec, 0xa2, 0xbd, 0x8a, 0x7e, 0x3d, 0x08, 0xd6, 0x46,
	0x93, 0xa8, 0x12, 0xce, 0x5b, 0x7a, 0xf6, 0x2d, 0xa4, 0xa4, 0xd2, 0xd1, 0xf7, 0x12, 0xdf, 0xe1,
	0xa6, 0xd6, 0xd4, 0x7e, 0x42, 0x53, 0x42, 0xcc, 0x22, 0xb7, 0xbb, 0x5c, 0xc6, 0x77, 0xf6, 0x98,
	0xbc, 0xf8, 0xe8, 0x17, 0x56, 0x83, 0xf4, 0x74, 0x15, 0xbe, 0xc0, 0x55, 0x8f, 0x33, 0xec, 0x38,
	0xd3, 0x43, 0xce, 0x11, 0xa4, 0xd7, 0xc7, 0x67, 0x98, 0xb4, 0xc3, 0x2b, 0x8c, 0x03, 0x9c, 0x77,
	0x80, 0x5b, 0x07, 0x58, 0x1e, 0x86, 0xab, 0x41, 0x7a, 0xdc, 0x7e, 0x0d, 0x60, 0x94, 0x29, 0x69,
	0x48, 0x9a, 0x78, 0x09, 0x13, 0x7b, 0xfb, 0x35, 0xe9, 0x6d, 0x91, 0x11, 0xc6, 0xe0, 0x5b, 0x03,
	0xaf, 0x1d, 0xcd, 0xcd, 0x7e, 0x76, 0xe2, 0x44, 0x83, 0xb9, 0xf7, 0xe8, 0x6d, 0xec, 0xdb, 0x3d,
	0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x71, 0x02, 0xcf, 0xa7, 0xd2, 0x01, 0x00, 0x00,
}
